{
	"name": "Notebook_Lisseth",
	"properties": {
		"folder": {
			"name": "Training"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "fdf5973a-7867-4a36-be48-e3a401da9ed4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b2c447f4-0f0b-471d-a130-0c72330f08f2/resourceGroups/DataX-ResGroup/providers/Microsoft.Synapse/workspaces/dataxsynapsedev/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://dataxsynapsedev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import io\r\n",
					"import os\r\n",
					"import sys\r\n",
					"import glob\r\n",
					"import json\r\n",
					"import datetime\r\n",
					"import requests\r\n",
					"from tqdm import tqdm\r\n",
					"import numpy as np\r\n",
					"import pandas as pd\r\n",
					"import google_auth_httplib2\r\n",
					"from googleads import adwords\r\n",
					"from rauth import OAuth2Service\r\n",
					"import google.oauth2.credentials\r\n",
					"from datetime import datetime, timedelta\r\n",
					"from googleapiclient.discovery import build as google_build\r\n",
					"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
					"from google.ads.googleads.client import GoogleAdsClient\r\n",
					"from google.ads.googleads.errors import GoogleAdsException"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"\r\n",
					"credentials = mssparkutils.credentials.getSecretWithLS('ls_keyvault', 'GoogleAdsAlejandroTest')\r\n",
					""
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Client and Tenant of the application in Azure Directory\r\n",
					"clientID = '95e2c30e-8533-4c18-b3c7-4718847e9f28'\r\n",
					"tenantID = '89248974-515e-4d65-9469-ab424abfd2d2'\r\n",
					"#getSecretwithLS -> this is with the LinkService y and the name of the secret in Key Vault\r\n",
					"clientSecret =  mssparkutils.credentials.getSecretWithLS('ls_keyvault','PBIServPrincipalAPISecret')"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Petition to a web \r\n",
					"response = requests.get('https://google.com')"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Petition to the API\r\n",
					"url = f'https://login.microsoftonline.com/{tenantID}/oauth2/token'\r\n",
					"body = f'grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id={clientID}&client_secret={clientSecret}'\r\n",
					"response = requests.post(url, data = body)\r\n",
					""
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"responseJson = response.json()\r\n",
					"print(responseJson)"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Access to a element of the dictionary with []\r\n",
					"token = responseJson['access_token']\r\n",
					"print(token)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Getting the ID of the workspace in PowerBI: Porfolio\r\n",
					"workSpaceID = 'ac1176e8-1b38-40d3-91e4-3b8f5983aa5f'\r\n",
					"url = f'https://api.powerbi.com/v1.0/myorg/groups/{workSpaceID}/datasets'"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Getting the DataSet of the worskpace\r\n",
					"r = requests.get(url, headers={\"Authorization\":\"Bearer \" + token})\r\n",
					"print(r)"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Formatting the output of the response\r\n",
					"print(json.dumps( r.json(), indent=4, sort_keys=False))"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"datasets = r.json()['value']\r\n",
					"keeper_keys = ['id', 'name', 'configuredBy']\r\n",
					"keeper = []\r\n",
					"\r\n",
					"for dataset in datasets:\r\n",
					"    keeper_dict = {}\r\n",
					"\r\n",
					"    for key in keeper_keys:\r\n",
					"        keeper_dict[key] = dataset[key]\r\n",
					"        \r\n",
					"    keeper.append(keeper_dict)\r\n",
					"\r\n",
					"print(keeper)"
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = pd.DataFrame(keeper)\r\n",
					"df.columns"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.head()"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df['name'] = df['name'].str.upper()"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"csv  = df.to_csv(index=False)"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.fs.put('/Training/Lisseth/datasets.csv',csv,True)"
				],
				"execution_count": 94
			}
		]
	}
}